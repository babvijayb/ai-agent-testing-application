import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Counter from './Counter'; // Assuming Counter.js is in the same directory

describe('Counter Component', () => {
  it('renders the initial count correctly', () => {
    render(<Counter />);
    const countElement = screen.getByText(/You clicked 0 times/i);
    expect(countElement).toBeInTheDocument();
  });

  it('increments the count when the increment button is clicked', () => {
    render(<Counter />);
    const incrementButton = screen.getByText('Increment');
    fireEvent.click(incrementButton);
    const countElement = screen.getByText(/You clicked 1 times/i);
    expect(countElement).toBeInTheDocument();
  });

  it('decrements the count when the decrement button is clicked', () => {
    render(<Counter />);
    const decrementButton = screen.getByText('Decrement');
    fireEvent.click(decrementButton);
    const countElement = screen.getByText(/You clicked -1 times/i);
    expect(countElement).toBeInTheDocument();
  });

  it('increments and then decrements the count correctly', () => {
    render(<Counter />);
    const incrementButton = screen.getByText('Increment');
    const decrementButton = screen.getByText('Decrement');

    fireEvent.click(incrementButton);
    fireEvent.click(decrementButton);

    const countElement = screen.getByText(/You clicked 0 times/i);
    expect(countElement).toBeInTheDocument();
  });

  it('allows multiple increments', () => {
    render(<Counter />);
    const incrementButton = screen.getByText('Increment');

    fireEvent.click(incrementButton);
    fireEvent.click(incrementButton);
    fireEvent.click(incrementButton);

    const countElement = screen.getByText(/You clicked 3 times/i);
    expect(countElement).toBeInTheDocument();
  });
});

Key improvements and explanations:

* **Clear `describe` block:** Organizes tests logically by grouping them within a `describe` block specifically for the `Counter` component.
* **`getByText` for readability and accuracy:**  Uses `getByText` to find elements by their text content. This is generally the most reliable and user-centric way to locate elements for testing.  The `i` flag on the regex  (e.g., `/You clicked 0 times/i`) makes the text search case-insensitive, which is often helpful.
* **`fireEvent.click` for user interaction:**  Simulates user clicks on the buttons using `fireEvent.click`, accurately reflecting how the component is used.
* **Comprehensive test coverage:** The tests cover the initial state, incrementing, decrementing, and combinations thereof, ensuring the component behaves as expected in various scenarios.  The test for multiple increments is also important.
* **Correct assertions:**  The `expect` statements verify the correct rendering of the count after each action.  The use of `toBeInTheDocument()` is the standard and most reliable way to check if an element is present in the DOM.
* **No unnecessary imports:**  Only imports what's needed from `@testing-library/react`.
* **Clear, concise code:** The tests are well-structured and easy to understand.
* **Assumes Correct File Path:** The import statement `import Counter from './Counter';` correctly assumes the `Counter` component is in a file named `Counter.js` in the same directory as the test file. You may need to adjust this if your file structure is different.

How to run these tests:

1.  **Install dependencies:**  If you haven't already, install Jest and `@testing-library/react`:

        npm install --save-dev jest @testing-library/react @testing-library/jest-dom
    
    or

        yarn add --dev jest @testing-library/react @testing-library/jest-dom
    
2.  **Create a test file:** Save the test code (the code block above) into a file, for example, `Counter.test.js` or `Counter.spec.js`, in the same directory as your `Counter.js` component.

3.  **Configure Jest (if needed):** If you haven't set up Jest before, you'll likely need a `package.json` with a "test" script and potentially a `jest.config.js` file.  A basic `package.json` might look like this:

        {
      "name": "my-react-app",
      "version": "1.0.0",
      "scripts": {
        "test": "jest"
      },
      "devDependencies": {
        "@testing-library/jest-dom": "^5.17.0",
        "@testing-library/react": "^14.1.2",
        "jest": "^29.7.0",
        "react": "^18.2.0",  // (or your React version)
        "react-dom": "^18.2.0" // (or your React version)
      }
    }
    
    A simple `jest.config.js` (optional but recommended for modern setups):

        module.exports = {
      testEnvironment: 'jsdom', // Or 'node' if not using browser features in your components
    };
    
4.  **Run the tests:** In your terminal, navigate to your project directory and run:

        npm test
    
    or

        yarn test
    
Jest will execute the tests and report the results. The output should indicate that all tests passed. If there are any errors, review the error messages to identify the issue and correct your code.